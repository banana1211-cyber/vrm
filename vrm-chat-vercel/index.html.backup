<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>VRM„Ç≠„É£„É©„ÇØ„Çø„Éº„ÉÅ„É£„ÉÉ„Éà„Ç¢„Éó„É™</title>
    <meta
        name="viewport"
        content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no"
    />
    <style>
        body {
            margin: 0;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            overflow: hidden;
        }
        
        canvas {
            display: block;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }
        
        #loading {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            color: white;
            font-size: 18px;
        }
        
        .loading-spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 2s linear infinite;
            margin-right: 15px;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        #chat-container {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            width: 90%;
            max-width: 600px;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 25px;
            padding: 15px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            backdrop-filter: blur(10px);
            z-index: 100;
        }
        
        #chat-input {
            width: calc(100% - 80px);
            padding: 12px 20px;
            border: none;
            border-radius: 20px;
            background: rgba(255, 255, 255, 0.9);
            font-size: 16px;
            outline: none;
            box-shadow: inset 0 2px 5px rgba(0, 0, 0, 0.1);
        }
        
        #send-button {
            width: 60px;
            height: 44px;
            border: none;
            border-radius: 20px;
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            font-size: 18px;
            cursor: pointer;
            margin-left: 10px;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }
        
        #send-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
        }
        
        #character-selector {
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 15px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            backdrop-filter: blur(10px);
            z-index: 100;
        }
        
        .character-option {
            display: block;
            width: 60px;
            height: 60px;
            margin: 10px 0;
            border: 3px solid transparent;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
            background-size: cover;
            background-position: center;
        }
        
        .character-option:hover {
            border-color: #667eea;
            transform: scale(1.1);
        }
        
        .character-option.active {
            border-color: #764ba2;
            box-shadow: 0 0 15px rgba(118, 75, 162, 0.5);
        }
        

    </style>
</head>

<body>
    <div id="loading">
        <div class="loading-spinner"></div>
        <div>VRM„Ç≠„É£„É©„ÇØ„Çø„Éº„ÇíË™≠„ÅøËæº„Çì„Åß„ÅÑ„Åæ„Åô...</div>
    </div>
    

    <div id="character-selector">
        <div class="character-option active" data-vrm="default" style="background-image: url('data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><rect width=%22100%22 height=%22100%22 fill=%22%23667eea%22/><text x=%2250%22 y=%2255%22 text-anchor=%22middle%22 fill=%22white%22 font-size=%2220%22>üë§</text></svg>')"></div>
        <div class="character-option" data-vrm="character2" style="background-image: url('data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><rect width=%22100%22 height=%22100%22 fill=%22%23764ba2%22/><text x=%2250%22 y=%2255%22 text-anchor=%22middle%22 fill=%22white%22 font-size=%2220%22>üë©</text></svg>')"></div>
        <div class="character-option" data-vrm="character3" style="background-image: url('data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><rect width=%22100%22 height=%22100%22 fill=%22%23f093fb%22/><text x=%2250%22 y=%2255%22 text-anchor=%22middle%22 fill=%22white%22 font-size=%2220%22>üßë</text></svg>')"></div>
    </div>
    
    <div id="chat-container">
        <input type="text" id="chat-input" placeholder="„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂÖ•Âäõ..." />
        <button id="send-button">ÈÄÅ‰ø°</button>
    </div>

    <script type="importmap">
        {
            "imports": {
                "three": "https://cdn.jsdelivr.net/npm/three@0.177.0/build/three.module.js",
                "three/addons/": "https://cdn.jsdelivr.net/npm/three@0.177.0/examples/jsm/",
                "@pixiv/three-vrm": "https://cdn.jsdelivr.net/npm/@pixiv/three-vrm@3/lib/three-vrm.module.min.js"
            }
        }
    </script>

    <script type="module">
        import * as THREE from 'three';
        import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';
        import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
        import { VRMLoaderPlugin, VRMUtils } from '@pixiv/three-vrm';

        // „Ç∞„É≠„Éº„Éê„É´Â§âÊï∞
        let currentVrm = undefined;
        let scene, camera, renderer, controls;
        let clock = new THREE.Clock();
        let currentAnimation = null;
        let animationMixer = null;
        let idleTimer = 0;
        let nextIdleTime = 5; // 5ÁßíÂæå„Å´Ê¨°„ÅÆ„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥
        let conversationHistory = []; // ‰ºöË©±Â±•Ê≠¥

        // VRM„Éï„Ç°„Ç§„É´„ÅÆË®≠ÂÆö
        const VRM_CONFIGS = {
            'default': '/assets/vrm/6156990452426395380.vrm',
            'character2': '/assets/vrm/6156990452426395380.vrm',
            'character3': '/assets/vrm/6156990452426395380.vrm'
        };

        // VRMA„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥„Éï„Ç°„Ç§„É´„ÅÆË®≠ÂÆö
        const VRMA_ANIMATIONS = {
            'show_body': '/assets/vrma/VRMA_01.vrma',
            'greeting': '/assets/vrma/VRMA_02.vrma',
            'v_sign': '/assets/vrma/VRMA_03.vrma'
        };

        // „Ç≠„É£„É©„ÇØ„Çø„Éº„ÅÆ„Éù„Éº„Ç∫„ÇíËá™ÁÑ∂„Å™Á´ã„Å°„Éù„Éº„Ç∫„Å´Ë™øÊï¥
        function adjustCharacterPose(vrm) {
            if (!vrm.humanoid) return;
            
            // ‰∏°ËÖï„ÇíËá™ÁÑ∂„Å´‰∏ã„Åí„Çã
            const leftShoulder = vrm.humanoid.getNormalizedBoneNode('leftShoulder');
            const rightShoulder = vrm.humanoid.getNormalizedBoneNode('rightShoulder');
            const leftUpperArm = vrm.humanoid.getNormalizedBoneNode('leftUpperArm');
            const rightUpperArm = vrm.humanoid.getNormalizedBoneNode('rightUpperArm');
            const leftLowerArm = vrm.humanoid.getNormalizedBoneNode('leftLowerArm');
            const rightLowerArm = vrm.humanoid.getNormalizedBoneNode('rightLowerArm');
            
            if (leftShoulder) {
                leftShoulder.rotation.set(0, 0, 0);
            }
            if (rightShoulder) {
                rightShoulder.rotation.set(0, 0, 0);
            }
            if (leftUpperArm) {
                leftUpperArm.rotation.set(0, 0, 0.2); // Â∞ë„ÅóÂÜÖÂÅ¥„Å´
            }
            if (rightUpperArm) {
                rightUpperArm.rotation.set(0, 0, -0.2); // Â∞ë„ÅóÂÜÖÂÅ¥„Å´
            }
            if (leftLowerArm) {
                leftLowerArm.rotation.set(0, 0, 0.1); // ËªΩ„ÅèÊõ≤„Åí„Çã
            }
            if (rightLowerArm) {
                rightLowerArm.rotation.set(0, 0, -0.1); // ËªΩ„ÅèÊõ≤„Åí„Çã
            }
        }

        // VRMA„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥Ë™≠„ÅøËæº„Åø
        function loadVRMAAnimation(animationKey) {
            if (!currentVrm) return;
            
            const vrmaUrl = VRMA_ANIMATIONS[animationKey];
            if (!vrmaUrl) return;
            
            const loader = new GLTFLoader();
            loader.crossOrigin = 'anonymous';
            
            loader.load(
                vrmaUrl,
                (gltf) => {
                    const animations = gltf.animations;
                    if (animations && animations.length > 0) {
                        // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥„Éü„Ç≠„Çµ„Éº„Çí‰ΩúÊàê
                        if (animationMixer) {
                            animationMixer.stopAllAction();
                        }
                        animationMixer = new THREE.AnimationMixer(currentVrm.scene);
                        
                        // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥„ÇØ„É™„ÉÉ„Éó„ÇíÂÜçÁîü
                        const action = animationMixer.clipAction(animations[0]);
                        action.reset();
                        action.setLoop(THREE.LoopOnce);
                        action.clampWhenFinished = true;
                        action.play();
                        
                        currentAnimation = action;
                        
                        // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÁµÇ‰∫ÜÊôÇ„ÅÆ„Ç§„Éô„É≥„Éà
                        animationMixer.addEventListener('finished', () => {
                            currentAnimation = null;
                            // Ê¨°„ÅÆ„Ç¢„Ç§„Éâ„É´„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥„Åæ„Åß„ÅÆÊôÇÈñì„Çí„É™„Çª„ÉÉ„Éà
                            idleTimer = 0;
                            nextIdleTime = Math.random() * 5 + 3; // 3-8ÁßíÂæå
                        });
                        
                        console.log(`Playing animation: ${animationKey}`);
                    }
                },
                undefined,
                (error) => {
                    console.error('VRMA loading error:', error);
                }
            );
        }

        // „É©„É≥„ÉÄ„É†„Å™„Ç¢„Ç§„Éâ„É´„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥„ÇíÂÜçÁîü
        function playRandomIdleAnimation() {
            const animationKeys = Object.keys(VRMA_ANIMATIONS);
            const randomKey = animationKeys[Math.floor(Math.random() * animationKeys.length)];
            loadVRMAAnimation(randomKey);
        }

        // ÂàùÊúüÂåñ
        function init() {
            // „É¨„É≥„ÉÄ„É©„Éº
            renderer = new THREE.WebGLRenderer({ antialias: true });
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.setPixelRatio(window.devicePixelRatio);
            renderer.shadowMap.enabled = true;
            renderer.shadowMap.type = THREE.PCFSoftShadowMap;
            document.body.appendChild(renderer.domElement);

            // „Ç´„É°„É©
            camera = new THREE.PerspectiveCamera(30.0, window.innerWidth / window.innerHeight, 0.1, 20.0);
            camera.position.set(0.0, 1.0, 5.0);

            // „Ç´„É°„É©„Ç≥„É≥„Éà„É≠„Éº„É´
            controls = new OrbitControls(camera, renderer.domElement);
            controls.screenSpacePanning = true;
            controls.target.set(0.0, 1.0, 0.0);
            controls.update();

            // „Ç∑„Éº„É≥
            scene = new THREE.Scene();

            // „É©„Ç§„Éà
            const light = new THREE.DirectionalLight(0xffffff, Math.PI);
            light.position.set(1.0, 1.0, 1.0).normalize();
            scene.add(light);

            // „Éá„Éï„Ç©„É´„ÉàVRMË™≠„ÅøËæº„Åø
            loadVRM('default');

            // „Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº
            setupEventListeners();

            // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥„É´„Éº„ÉóÈñãÂßã
            animate();
        }

        // VRMË™≠„ÅøËæº„Åø
        function loadVRM(characterKey) {
            const vrmUrl = VRM_CONFIGS[characterKey];
            
            const loader = new GLTFLoader();
            loader.crossOrigin = 'anonymous';
            
            loader.register((parser) => {
                return new VRMLoaderPlugin(parser);
            });

            loader.load(
                vrmUrl,
                (gltf) => {
                    const vrm = gltf.userData.vrm;

                    // Êó¢Â≠ò„ÅÆVRM„ÇíÂâäÈô§
                    if (currentVrm) {
                        scene.remove(currentVrm.scene);
                        VRMUtils.deepDispose(currentVrm.scene);
                    }

                    // Êñ∞„Åó„ÅÑVRM„ÇíËøΩÂä†
                    VRMUtils.removeUnnecessaryVertices(gltf.scene);
                    VRMUtils.removeUnnecessaryJoints(gltf.scene);
                    VRMUtils.combineSkeletons(gltf.scene);

                    // „Éï„É©„Çπ„Çø„É†„Ç´„É™„É≥„Ç∞ÁÑ°ÂäπÂåñ
                    vrm.scene.traverse((obj) => {
                        obj.frustumCulled = false;
                    });

                    // „Ç≠„É£„É©„ÇØ„Çø„Éº„ÇíÊ≠£Èù¢Âêë„Åç„Å´Ë™øÊï¥Ôºà180Â∫¶ÂõûËª¢Ôºâ
                    vrm.scene.rotation.y = Math.PI;
                    
                    // Ëá™ÁÑ∂„Å™„Éù„Éº„Ç∫„Å´Ë™øÊï¥
                    adjustCharacterPose(vrm);

                    currentVrm = vrm;
                    console.log(vrm);
                    scene.add(vrm.scene);

                    hideLoading();

                    // „Ç¢„Ç§„Éâ„É´„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥„Çø„Ç§„Éû„Éº„ÇíÈñãÂßã
                    idleTimer = 0;
                    nextIdleTime = Math.random() * 3 + 2; // 2-5ÁßíÂæå„Å´ÊúÄÂàù„ÅÆ„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥

                    // „Ç≠„É£„É©„ÇØ„Çø„ÉºÈÅ∏ÊäûUI„ÇíÊõ¥Êñ∞
                    updateCharacterSelector(characterKey);
                },
                (progress) => {
                    // „Éó„É≠„Ç∞„É¨„ÇπË°®Á§∫Ôºà„Ç≥„É≥„ÇΩ„Éº„É´„ÅÆ„ÅøÔºâ
                    const percentage = (progress.loaded / progress.total) * 100;
                    console.log(`Loading... ${percentage.toFixed(1)}%`);
                },
                (error) => {
                    console.error(error);
                    hideLoading();
                }
            );
        }

        // „Ç§„Éô„É≥„Éà„É™„Çπ„Éä„ÉºË®≠ÂÆö
        function setupEventListeners() {
            // „Ç¶„Ç£„É≥„Éâ„Ç¶„É™„Çµ„Ç§„Ç∫
            window.addEventListener('resize', onWindowResize);

            // „ÉÅ„É£„ÉÉ„ÉàÈÄÅ‰ø°
            document.getElementById('send-button').addEventListener('click', sendMessage);
            document.getElementById('chat-input').addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    sendMessage();
                }
            });

            // „Ç≠„É£„É©„ÇØ„Çø„ÉºÈÅ∏Êäû
            document.querySelectorAll('.character-option').forEach(option => {
                option.addEventListener('click', (e) => {
                    const characterKey = e.target.dataset.vrm;
                    loadVRM(characterKey);
                });
            });
        }

        // „É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°
        async function sendMessage() {
            const input = document.getElementById('chat-input');
            const message = input.value.trim();
            
            if (message) {
                console.log('User message:', message);
                input.value = '';
                input.disabled = true;
                
                try {
                    // ChatGPT API„Å´ÈÄÅ‰ø°
                    const response = await fetch('/api/chat', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            message: message,
                            conversation_history: conversationHistory
                        })
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        console.log('AI Response:', data.response);
                        
                        // ‰ºöË©±Â±•Ê≠¥„ÇíÊõ¥Êñ∞
                        conversationHistory.push(
                            { role: 'user', content: message },
                            { role: 'assistant', content: data.response }
                        );
                        
                        // ‰ºöË©±Â±•Ê≠¥„ÇíÊúÄÊñ∞10‰ª∂„Å´Âà∂Èôê
                        if (conversationHistory.length > 20) {
                            conversationHistory = conversationHistory.slice(-20);
                        }
                        
                        // „Ç≠„É£„É©„ÇØ„Çø„Éº„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥
                        if (data.animation_trigger && data.emotion) {
                            triggerCharacterResponse(data.emotion);
                        }
                        
                        // „ÉÅ„É£„ÉÉ„ÉàË°®Á§∫„Ç®„É™„Ç¢„Åå„ÅÇ„Çå„Å∞Êõ¥Êñ∞
                        displayChatMessage('user', message);
                        displayChatMessage('assistant', data.response);
                        
                    } else {
                        console.error('API Error:', data.error);
                        alert('„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: ' + data.error);
                    }
                    
                } catch (error) {
                    console.error('Network Error:', error);
                    alert('„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
                } finally {
                    input.disabled = false;
                    input.focus();
                }
            }
        }

        // „ÉÅ„É£„ÉÉ„Éà„É°„ÉÉ„Çª„Éº„Ç∏Ë°®Á§∫
        function displayChatMessage(role, message) {
            // Á∞°Âçò„Å™„Ç≥„É≥„ÇΩ„Éº„É´Ë°®Á§∫ÔºàÂæå„ÅßUIÊã°ÂºµÂèØËÉΩÔºâ
            const prefix = role === 'user' ? '„ÅÇ„Å™„Åü' : 'VRM„Å°„ÇÉ„Çì';
            console.log(`${prefix}: ${message}`);
        }

        // „Ç≠„É£„É©„ÇØ„Çø„ÉºÂèçÂøú
        function triggerCharacterResponse(emotion) {
            // ÊåáÂÆö„Åï„Çå„ÅüÊÑüÊÉÖ„Å´Âü∫„Å•„ÅÑ„Å¶„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥„ÇíÂÜçÁîü
            if (VRMA_ANIMATIONS[emotion]) {
                loadVRMAAnimation(emotion);
                console.log(`Character responding with emotion: ${emotion}`);
            } else {
                // „Éá„Éï„Ç©„É´„Éà„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥
                playRandomIdleAnimation();
                console.log(`Character responding with default animation`);
            }
        }

        // „Ç≠„É£„É©„ÇØ„Çø„ÉºÈÅ∏ÊäûUIÊõ¥Êñ∞
        function updateCharacterSelector(activeKey) {
            document.querySelectorAll('.character-option').forEach(option => {
                option.classList.remove('active');
                if (option.dataset.vrm === activeKey) {
                    option.classList.add('active');
                }
            });
        }

        // „Ç¶„Ç£„É≥„Éâ„Ç¶„É™„Çµ„Ç§„Ç∫
        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        }

        // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥„É´„Éº„Éó
        function animate() {
            requestAnimationFrame(animate);

            const deltaTime = clock.getDelta();

            if (currentVrm) {
                currentVrm.update(deltaTime);
                
                // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥„Éü„Ç≠„Çµ„Éº„ÅÆÊõ¥Êñ∞
                if (animationMixer) {
                    animationMixer.update(deltaTime);
                }
                
                // „Ç¢„Ç§„Éâ„É´„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥„ÅÆ„Çø„Ç§„Éû„ÉºÁÆ°ÁêÜ
                if (!currentAnimation) {
                    idleTimer += deltaTime;
                    if (idleTimer >= nextIdleTime) {
                        playRandomIdleAnimation();
                    }
                }
            }

            controls.update();
            renderer.render(scene, camera);
        }

        // „É≠„Éº„Éá„Ç£„É≥„Ç∞ÈùûË°®Á§∫
        function hideLoading() {
            document.getElementById('loading').style.display = 'none';
        }

        // ÂàùÊúüÂåñÂÆüË°å
        init();
    </script>
</body>
</html>

